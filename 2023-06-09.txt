#include <windows.h>
#include <gl/gl.h>
#pragma comment(lib, "opengl32.lib")
LRESULT CALLBACK WindowProc(HWND, UINT, WPARAM, LPARAM);
void EnableOpenGL(HWND hwnd, HDC*, HGLRC*);
void DisableOpenGL(HWND, HDC, HGLRC);

int width = 1000;
int height = 500;
int sizeN = 10;

#define mapW 10
#define mapH 10

typedef struct {
	BOOL ship;
	BOOL miss;
	BOOL open;
} TCell;

TCell mapMy[mapW][mapH];
TCell mapCm[mapW][mapH];

void Game_New()
{
	srand(time(NULL));
	memset(mapMy, 0, sizeof(mapMy));

	for (int i = 0; i < 15; i++)
	{
		int x = rand() % mapW;
		int y = rand() % mapH;
		if (mapMy[x][y].ship) i--;
		else mapMy[x][y].ship = TRUE;
	}
}


void WindowsSize(width, height)
{
	float k = 0.5 * width / (float)height;
	glViewport(0, 0, width, height);
	glLoadIdentity();
	if (k >= 1) glOrtho(-k, k, -1, 1, -1, 1);
	else glOrtho(-1, 1, -1 / k, 1 / k, -1, 1);
}

void Grid()
{
	glLineWidth(1);
	glBegin(GL_LINES);
	glColor3f(1, 0, 0);
	glVertex2f(-1, 0);
	glVertex2f(1, 0);
	glVertex2f(0, -1);
	glVertex2f(0, 1);
	glVertex2f(-0.5, -1);
	glVertex2f(-0.5, 1);
	glVertex2f(0.5, -1);
	glVertex2f(0.5, 1);
	glEnd();
}

void Quad(float x, float y, float size)//квадрат
{
	glPushMatrix();
	glTranslatef(x, y, 0);
	glScalef(size , size, 1);

	glBegin(GL_TRIANGLE_STRIP);
		glColor3f(0.3, 0.65, 1.0); glVertex2f(-1, 1);
		glColor3f(0.2, 0.55, 0.9); glVertex2f(1, 1);
		glVertex2f(-1, -1);
		glColor3f(0.1, 0.45, 0.8); glVertex2f(1, -1);
	glEnd();

	glPopMatrix();
}

int WINAPI WinMain(HINSTANCE hInstance,
	HINSTANCE hPrevInstance,
	LPSTR lpCmdLine,
	int nCmdShow)
{
	WNDCLASSEX wcex;
	HWND hwnd;
	HDC hDC;
	HGLRC hRC;
	MSG msg;
	BOOL bQuit = FALSE;
	float theta = 0.0f;

	/* register window class */
	wcex.cbSize = sizeof(WNDCLASSEX);
	wcex.style = CS_OWNDC;
	wcex.lpfnWndProc = WindowProc;
	wcex.cbClsExtra = 0;
	wcex.cbWndExtra = 0;
	wcex.hInstance = hInstance;
	wcex.hIcon = LoadIcon(NULL, IDI_APPLICATION);
	wcex.hCursor = LoadCursor(NULL, IDC_ARROW);
	wcex.hbrBackground = (HBRUSH)GetStockObject(BLACK_BRUSH);
	wcex.lpszMenuName = NULL;
	wcex.lpszClassName = "GLSample";
	wcex.hIconSm = LoadIcon(NULL, IDI_APPLICATION);;


	if (!RegisterClassEx(&wcex))
		return 0;

	/* create main window */
	hwnd = CreateWindowEx(0,
		"GLSample",
		"OpenGL Sample",
		WS_OVERLAPPEDWINDOW,
		CW_USEDEFAULT,
		CW_USEDEFAULT,
		width,//размер окна по X
		height,//размер окна по Y
		NULL,
		NULL,
		hInstance,
		NULL);

	ShowWindow(hwnd, nCmdShow);

	/* enable OpenGL for the window */
	EnableOpenGL(hwnd, &hDC, &hRC);

	WindowsSize(width, height);//размер окна при старте
	Game_New();

	/* program main loop */
	while (!bQuit)
	{
		/* check for messages */
		if (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
		{
			/* handle or dispatch messages */
			if (msg.message == WM_QUIT)
			{
				bQuit = TRUE;
			}
			else
			{
				TranslateMessage(&msg);
				DispatchMessage(&msg);
			}
		}
		else
		{


			/* OpenGL animation code goes here */

//			glClearColor(0.7f, 1.0f, 0.7f, 0.0f);
			glClearColor(0.6f, 0.9f, 0.6f, 0.0f);
			glClear(GL_COLOR_BUFFER_BIT);

			for (int n = -1; n < 2; n += 2)
			{
				glPushMatrix();
				glScalef(0.5, 1, 1);
				glTranslatef(n - 0.45, -0.45, 0);
				for (float i = 0; i < sizeN; i++)
					for (float j = 0; j < sizeN; j++)
					{
						Quad(i / sizeN, j / sizeN, 0.5 / sizeN);
					}
				glPopMatrix();
			}
/*
			glRotatef(theta, 1, 1, 1);
//			glRotatef(theta, 0.0f, 0.0f, 1.0f);

			glBegin(GL_TRIANGLES);

			glColor3f(1.0f, 0.0f, 0.0f);   glVertex2f(0.0f, 1.0f);
			glColor3f(0.0f, 1.0f, 0.0f);   glVertex2f(0.87f, -0.5f);
			glColor3f(0.0f, 0.0f, 1.0f);   glVertex2f(-0.87f, -0.5f);

			glColor3f(1.0f, 0.0f, 0.0f);   glVertex2f(1, 1);
			glColor3f(0.0f, 1.0f, 0.0f);   glVertex2f(-1, 1);
			glColor3f(0.0f, 0.0f, 1.0f);   glVertex2f(1, -1);

			glColor3f(1.0f, 0.0f, 0.0f);   glVertex2f(-1, -1);
			glColor3f(0.0f, 1.0f, 0.0f);   glVertex2f(-1, 1);
			glColor3f(0.0f, 0.0f, 1.0f);   glVertex2f(1, -1);

			glEnd();
*/
			
			Grid();

			SwapBuffers(hDC);

			theta += 1.0f;//угол поворота
			Sleep(1);
		}
	}

	/* shutdown OpenGL */
	DisableOpenGL(hwnd, hDC, hRC);

	/* destroy the window explicitly */
	DestroyWindow(hwnd);

	return msg.wParam;
}

LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
	switch (uMsg)
	{
	case WM_CLOSE:
		PostQuitMessage(0);
		break;

	case WM_SIZE://область вывода изображения OpenGL устанавливается в размер клиентского окна
		width = LOWORD(lParam);
		height = HIWORD(lParam);
		WindowsSize(width, height);
		break;

	case WM_DESTROY:
		return 0;

	case WM_KEYDOWN:
	{
		switch (wParam)
		{
		case VK_ESCAPE:
			PostQuitMessage(0);
			break;
		}
	}
	break;

	default:
		return DefWindowProc(hwnd, uMsg, wParam, lParam);
	}

	return 0;
}

void EnableOpenGL(HWND hwnd, HDC* hDC, HGLRC* hRC)
{
	PIXELFORMATDESCRIPTOR pfd;

	int iFormat;

	/* get the device context (DC) */
	*hDC = GetDC(hwnd);

	/* set the pixel format for the DC */
	ZeroMemory(&pfd, sizeof(pfd));

	pfd.nSize = sizeof(pfd);
	pfd.nVersion = 1;
	pfd.dwFlags = PFD_DRAW_TO_WINDOW |
		PFD_SUPPORT_OPENGL | PFD_DOUBLEBUFFER;
	pfd.iPixelType = PFD_TYPE_RGBA;
	pfd.cColorBits = 24;
	pfd.cDepthBits = 16;
	pfd.iLayerType = PFD_MAIN_PLANE;

	iFormat = ChoosePixelFormat(*hDC, &pfd);

	SetPixelFormat(*hDC, iFormat, &pfd);

	/* create and enable the render context (RC) */
	*hRC = wglCreateContext(*hDC);

	wglMakeCurrent(*hDC, *hRC);
}

void DisableOpenGL(HWND hwnd, HDC hDC, HGLRC hRC)
{
	wglMakeCurrent(NULL, NULL);
	wglDeleteContext(hRC);
	ReleaseDC(hwnd, hDC);
}

